#include <pthread.h>

#include <array>
#include <tuple>

#include "../../gardener/Gardener.h"
#include "../../io/Output.h"

#ifndef IDZ4_GARDENERQUEUE_H
#define IDZ4_GARDENERQUEUE_H


// Класс для хранения данных о положении садовников и
// автоматической синхронизации доступа к ним
class GardenerQueue {
    int awaiting;  // Количество садовников, ожидающих, когда поле перед ними освободится
    pthread_mutex_t mtx;  // Мьютекс для доступа к координатам садовников
    pthread_cond_t cond_for_gardeners;  // Условная переменная для садовников. Когда поле перед садовником занято,
                                        // он начинает ждать сигнала от этой переменной. Когда садовник заканчивает
                                        // работу и переходит на следующее поле, он посылает этот сигнал - если другой
                                        // садовник ждал - он продолжит работу.
                                        // Если оба садовника ожидают сигнала от этой переменной -
                                        // возникло противостояние. Регулировщик решит его и вызовет этот сигнал,
                                        // возобновляя работу обоих садовников.
    pthread_cond_t cond_for_guard;  // Условная переменная для регулировщика. Пока противостояния нет, регулировщик ждет
                                    // сигнала от этой переменной. Когда противостояние происходит (т.е. количество
                                    // ожидающих становится равным 2), регулировщик пробуждается, решает противостояние,
                                    // пробуждает садовников и снова переходит в ожидание сигнала от этой переменной.
    std::array<Gardener, 2> gardeners;  // Садовники

public:
    GardenerQueue();
    ~GardenerQueue();
    void CheckIn(int gardener_id, size_t next_x, size_t next_y, Output &out);  // Метод для перемещения садовника
    void FixConfrontation(Output &out);  // Метод для решения противостояния
};


#endif //IDZ4_GARDENERQUEUE_H
